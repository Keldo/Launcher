<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>